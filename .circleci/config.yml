version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

#
#
jobs:
  setup_aws_cli:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: AKIARPUVGX2WBFYU24PW
          aws-secret-access-key: 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
          aws-region: us-east-1
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depend]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-depend

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depend]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            
            npm install 
            npm run build
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-depend

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depend]
      - run:
          name: test-frontend
          working_directory: ./frontend
          command: |

            npm install
            npm test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depend]
      - run:
          name: test-backend
          working_directory: ./backend
          command: |

            npm install 
            npm test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depend]
      - run:
          name: Front-end scan
          working_directory: ./frontend
          command: |
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depend]
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

    deploy-infrastructure: 
     docker:
       - image: cimg/node:13.8.0
     steps:
       - checkout #checkout code from git
       - run:
           name: Ensure back-end infrastructure exists #(deploying backend. get backend ip and save to memstash for frontend use)
           command: |
             aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=backend-tag \
               --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
       - run:
           name: Ensure front-end infrastructure exist
           command: |
              aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=backend-tag \
               --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
               URLS=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text) 
               curl -H "Content-Type: text/plain" -H "token: e2a60db0-bc3c-46fe-ad15-36e00ba41dea" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
       - run:
           name: Add back-end ip to ansible inventory
           command: |
              export backend_IP=$(aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters "Name=tag:Name,Values=ebackend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --output text >> .circleci/ansible/inventory.txt)
               cat ./.circleci/ansible/inventory.txt
       - restore_cache:
           keys: [backend-depend]
       - persist_to_workspace:
           root: ~/project
           paths:
             - .circleci/ansible/inventory.txt
             - backend/
#         

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]